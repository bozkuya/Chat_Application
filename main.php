<?php
// Import necessary classes from packages
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use Slim\Factory\AppFactory;

// Include the autoloader generated by Composer
require __DIR__ . '/vendor/autoload.php';

// Create a dependency injection container with PHP-DI
$container = new DI\Container();
// Set the container for the AppFactory
AppFactory::setContainer($container);

// Use AppFactory to create an application
$app = AppFactory::create();
// Enable error middleware for debugging
$app->addErrorMiddleware(true, true, true);

// Define a dependency in the container for the database connection
$container->set('db', function() {
    // Create a new PDO instance for SQLite
    $db = new PDO('sqlite:./chat.db');
    // Set the error mode to exception for better error reporting
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    // Return the database connection
    return $db;
});

// Define a POST route for creating a new chat group
$app->post('/group', function (Request $request, Response $response, $args) {
    // Fetch data from the request body
    $data = $request->getParsedBody();
    $group_name = $data['name'];
    $user_id = $data['user_id'];

    // Prepare a query to check if the group already exists in the database
    $check_group = $this->get('db')->prepare("SELECT * FROM chat_groups WHERE name = ?");
    $check_group->execute([$group_name]);

    // If the group already exists, return an error message
    if ($check_group->fetch()) {
        $response->getBody()->write(json_encode(['error' => 'Group already exists']));
        return $response->withHeader('Content-Type', 'application/json')->withStatus(409);
    }

    // Prepare a query to create a new group in the database
    $create_group = $this->get('db')->prepare("INSERT INTO chat_groups (name) VALUES (?)");
    $create_group->execute([$group_name]);

    // Fetch the ID of the newly created group
    $group_id = $this->get('db')->lastInsertId();

    // Prepare a query to add the user to the newly created group
    $add_user = $this->get('db')->prepare("INSERT INTO group_members (user_id, group_id) VALUES (?, ?)");
    $add_user->execute([$user_id, $group_id]);

    // Return a success message
    $response->getBody()->write(json_encode(['success' => 'Group created and user added']));
    return $response->withHeader('Content-Type', 'application/json')->withStatus(201);
});

// Define a POST route for a user to join a chat group
$app->post('/group/{id}/join', function (Request $request, Response $response, $args) {
    // Fetch the group ID from the URL path
    $group_id = $args['id'];
    // Fetch data from the request body
    $data = $request->getParsedBody();
    $user_id = $data['user_id'];

    // Prepare a query to check if the user is already in the group
    $check_user = $this->get('db')->prepare("SELECT * FROM group_members WHERE user_id = ? AND group_id = ?");
    $check_user->execute([$user_id, $group_id]);

    // If the user is already in the group, return an error message
    if ($check_user->fetch()) {
        $response->getBody()->write(json_encode(['error' => 'User already in group']));
        return $response->withHeader('Content-Type', 'application/json')->withStatus(409);
    }

    // Prepare a query to add the user to the group
    $add_user = $this->get('db')->prepare("INSERT INTO group_members (user_id, group_id) VALUES (?, ?)");
    $add_user->execute([$user_id, $group_id]);

    // Return a success message
    $response->getBody()->write(json_encode(['success' => 'User added to group']));
    return $response->withHeader('Content-Type', 'application/json')->withStatus(201);
});

// Define a POST route for a user to send a message in a chat group
$app->post('/group/{id}/message', function (Request $request, Response $response, $args) {
    // Fetch the group ID from the URL path
    $group_id = $args['id'];
    // Fetch data from the request body
    $data = $request->getParsedBody();
    $user_id = $data['user_id'];
    $message = $data['message'];

    // Prepare a query to add the message to the group
    $add_message = $this->get('db')->prepare("INSERT INTO messages (user_id, group_id, message) VALUES (?, ?, ?)");
    $add_message->execute([$user_id, $group_id, $message]);

    // Return a success message
    $response->getBody()->write(json_encode(['success' => 'Message sent']));
    return $response->withHeader('Content-Type', 'application/json')->withStatus(201);
});

// Define a GET route to fetch all messages in a chat group
$app->get('/group/{id}/messages', function (Request $request, Response $response, $args) {
    // Fetch the group ID from the URL path
    $group_id = $args['id'];

    // Prepare a query to fetch all messages from the group
    $get_messages = $this->get('db')->prepare("SELECT * FROM messages WHERE group_id = ? ORDER BY timestamp DESC");
    $get_messages->execute([$group_id]);

    // Fetch all messages
    $messages = $get_messages->fetchAll();

    // Return the messages
    $response->getBody()->write(json_encode(['messages' => $messages]));
    return $response->withHeader('Content-Type', 'application/json')->withStatus(200);
});

// Run the application
$app->run();
// Yasincan Bozkurt